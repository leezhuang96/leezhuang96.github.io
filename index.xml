<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jordon&#39;s Blog</title>
    <link>https://leezhuang96.github.io/</link>
    <description>Recent content on Jordon&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://leezhuang96.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CLR via C# - CLR基础</title>
      <link>https://leezhuang96.github.io/2020/04/24/clr-via-csharp-1part/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/04/24/clr-via-csharp-1part/</guid>
      <description>CLR via C# - CLR基础 CLR的执行模型 1. 将源代码编译成托管模块 托管代码（Managed Code） 非托管代码（Native Code） CLR（Com</description>
    </item>
    
    <item>
      <title>Asp .Net Core 3.x Initialization - Blazor</title>
      <link>https://leezhuang96.github.io/2020/04/08/dot-net-core-blazor/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/04/08/dot-net-core-blazor/</guid>
      <description>Asp .Net Core 3.x Asp .Net Core 本质是 一个Server + 多个中间件（Middleware）组成的管道（Pipline）。 本身是一个console applica</description>
    </item>
    
    <item>
      <title>にほんご - 4 - 动词变形</title>
      <link>https://leezhuang96.github.io/2020/04/06/japanese/4part/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/04/06/japanese/4part/</guid>
      <description>にほんご- 第四单元 第四单元汇总 第13课 : 机の上に 本が 三冊 あります。（动词ます形） 语法+短句: 数量词 + 动词: ＿物体＿を ＿数量词＿ ＿动词＿ 动作发</description>
    </item>
    
    <item>
      <title>Asp .Net Core 3.x Initialization - SignalR</title>
      <link>https://leezhuang96.github.io/2020/04/05/dot-net-core-signalr/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/04/05/dot-net-core-signalr/</guid>
      <description>Asp .Net Core 3.x Asp .Net Core 本质是 一个Server + 多个中间件（Middleware）组成的管道（Pipline）。 本身是一个console applica</description>
    </item>
    
    <item>
      <title>Asp .Net Core 3.x Initialization - Razor page</title>
      <link>https://leezhuang96.github.io/2020/04/04/dot-net-core-razor-page/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/04/04/dot-net-core-razor-page/</guid>
      <description>Asp .Net Core 3.x Asp .Net Core 本质是 一个Server + 多个中间件（Middleware）组成的管道（Pipline）。 本身是一个console applica</description>
    </item>
    
    <item>
      <title>Asp .Net Core 3.x Initialization</title>
      <link>https://leezhuang96.github.io/2020/04/03/dot-net-core-init/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/04/03/dot-net-core-init/</guid>
      <description>Asp .Net Core 3.x Asp .Net Core 本质是 一个Server + 多个中间件（Middleware）组成的管道（Pipline）。 本身是一个console applica</description>
    </item>
    
    <item>
      <title>Redis Initialization</title>
      <link>https://leezhuang96.github.io/2020/04/03/redis/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/04/03/redis/</guid>
      <description>Redis简介 Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. Redis是一个开源的、基于内存的数据结构存储器，可以用作数据库、缓存和消息中间件。 Redis application</description>
    </item>
    
    <item>
      <title>Windows Tips</title>
      <link>https://leezhuang96.github.io/2020/04/03/windows-tips/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/04/03/windows-tips/</guid>
      <description></description>
    </item>
    
    <item>
      <title>にほんご - 3 - 形容词</title>
      <link>https://leezhuang96.github.io/2020/04/01/japanese/3part/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/04/01/japanese/3part/</guid>
      <description>にほんご- 第三单元 第三单元汇总 一类形容词（形容词）: （以い结尾 &amp;amp;&amp;amp; い是假名形式） 辛い（から～） 塩（しお）辛い（から～）／しょっぱい 酸っぱい（す</description>
    </item>
    
    <item>
      <title>にほんご - 2 - 动词</title>
      <link>https://leezhuang96.github.io/2020/02/17/japanese/2part/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/02/17/japanese/2part/</guid>
      <description>にほんご - 第二单元 第二单元汇总 年月日: 毎（まい） 今（いま） 日（にち） 一昨日（おととい） 昨日（きのう） 今日（きょう） 明日（あした／あす） 明後日</description>
    </item>
    
    <item>
      <title>Spring Cloud Initialization Project</title>
      <link>https://leezhuang96.github.io/2020/02/19/spring-cloud/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/02/19/spring-cloud/</guid>
      <description>Spring Cloud Init Project Description Registration Center: netflix-eureka-server Configuration Center: config-server Service Provider: netflix-eureka-client starter-config Serving Consumer: netflix-eureka-client starter-config starter-openfeign Load balance by feign. Create maven project Introduce dependencies spring-cloud-demo\pom.xml: &amp;lt;parent&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;version&amp;gt;2.0.7.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--JDK 9 缺失jar --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.xml.bind&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jaxb-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.sun.xml.bind&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jaxb-impl&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.sun.xml.bind&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jaxb-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.activation&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;activation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;</description>
    </item>
    
    <item>
      <title>にほんご - 1 - 名词</title>
      <link>https://leezhuang96.github.io/2020/02/13/japanese/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/02/13/japanese/</guid>
      <description>にほんご - 第一单元 五十音 あアa いイi うウu えエe おオo 拗音やヤya 拗音ゆユyu 拗音よヨyo かカka きキki くクku けケke こコko きゃキャk</description>
    </item>
    
    <item>
      <title>Vue &#43; Webpack Initialization</title>
      <link>https://leezhuang96.github.io/2020/01/13/webpack-vue-init/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2020/01/13/webpack-vue-init/</guid>
      <description>&lt;h2 id=&#34;vue--webpack-initialization&#34;&gt;Vue + Webpack Initialization&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Vue Coding Style</title>
      <link>https://leezhuang96.github.io/2019/12/27/vue-coding-style/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/27/vue-coding-style/</guid>
      <description>&lt;h2 id=&#34;vue-&#34;&gt;Vue 简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Vue&lt;/code&gt; (读音 &lt;code&gt;/vjuː/&lt;/code&gt;，类似于 &lt;code&gt;view&lt;/code&gt;) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，&lt;code&gt;Vue&lt;/code&gt; 被设计为可以自底向上逐层应用。&lt;code&gt;Vue&lt;/code&gt; 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，&lt;code&gt;Vue&lt;/code&gt; 也完全能够为复杂的单页应用提供驱动。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vue Initialization</title>
      <link>https://leezhuang96.github.io/2019/12/27/vue-init/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/27/vue-init/</guid>
      <description>&lt;h2 id=&#34;vue-&#34;&gt;Vue 简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Vue&lt;/code&gt; (读音 &lt;code&gt;/vjuː/&lt;/code&gt;，类似于 &lt;code&gt;view&lt;/code&gt;) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，&lt;code&gt;Vue&lt;/code&gt; 被设计为可以自底向上逐层应用。&lt;code&gt;Vue&lt;/code&gt; 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，&lt;code&gt;Vue&lt;/code&gt; 也完全能够为复杂的单页应用提供驱动。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（十一）</title>
      <link>https://leezhuang96.github.io/2019/12/26/es6-11part/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/26/es6-11part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（十二）</title>
      <link>https://leezhuang96.github.io/2019/12/26/es6-12part/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/26/es6-12part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（九）</title>
      <link>https://leezhuang96.github.io/2019/12/25/es6-9part/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/25/es6-9part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（十）</title>
      <link>https://leezhuang96.github.io/2019/12/25/es6-10part/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/25/es6-10part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（七）</title>
      <link>https://leezhuang96.github.io/2019/12/23/es6-7part/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/23/es6-7part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（八）</title>
      <link>https://leezhuang96.github.io/2019/12/23/es6-8part/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/23/es6-8part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（六）</title>
      <link>https://leezhuang96.github.io/2019/12/23/es6-6part/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/23/es6-6part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（五）</title>
      <link>https://leezhuang96.github.io/2019/12/20/es6-5part/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/20/es6-5part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（四）</title>
      <link>https://leezhuang96.github.io/2019/12/20/es6-4part/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/20/es6-4part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（三）</title>
      <link>https://leezhuang96.github.io/2019/12/18/es6-3part/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/18/es6-3part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（二）</title>
      <link>https://leezhuang96.github.io/2019/12/18/es6-2part/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/18/es6-2part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ECMAScript 6（一）</title>
      <link>https://leezhuang96.github.io/2019/12/13/es6-1part/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/12/13/es6-1part/</guid>
      <description>&lt;h2 id=&#34;ecmascript-6-&#34;&gt;ECMAScript 6 简介&lt;/h2&gt;
&lt;p&gt;ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Clean White Theme for Hugo</title>
      <link>https://leezhuang96.github.io/post/readme/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/post/readme/</guid>
      <description>Clean White Theme for Hugo CleanWhite is a clean, elegant, but fully functional blog theme for Hugo. Here is a live demo site using this theme.
It is based on huxblog Jekyll Theme and Clean Blog Jekyll Theme.
These two upstream projects have done awesome jobs to create a blog theme, what I&#39;m doing here is porting it to Hugo, of which I like the simplicity and the much faster compiling speed.</description>
    </item>
    
    <item>
      <title>Istio v1aplha3 routing API介绍(译文）</title>
      <link>https://leezhuang96.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/06/04/introducing-the-istio-v1alpha3-routing-api/</guid>
      <description>&lt;p&gt;到目前为止，Istio提供了一个简单的API来进行流量管理，该API包括了四种资源：RouteRule，DestinationPolicy，EgressRule和Ingress（直接使用了Kubernets的Ingress资源）。借助此API，用户可以轻松管理Istio服务网格中的流量。该API允许用户将请求路由到特定版本的服务，为弹性测试注入延迟和失败，添加超时和断路器等等，所有这些功能都不必更改应用程序本身的代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Istio 0.8 Release发布</title>
      <link>https://leezhuang96.github.io/2018/06/02/istio08/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/06/02/istio08/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在6月1日这一天的早上，Istio社区宣布发布0.8 Release，除了常规的故障修复和性能改进外，这个儿童节礼物里面还有什么值得期待内容呢？让我们来看一看：&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Everything about Setting Up My Ubuntu Desktop</title>
      <link>https://leezhuang96.github.io/2018/05/24/set_up_my_ubuntu_desktop/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/05/24/set_up_my_ubuntu_desktop/</guid>
      <description>Generate SSH Key Pair ssh-keygen -C &amp;quot;zhaohuabing@gmail.com&amp;quot;Shadowsocks Install shadowsokcs
sudo apt-get install python3-pipsudo pip3 install shadowsocksCreate config at config/shadowsocks.json, with the following content:
{&amp;quot;server&amp;quot;:&amp;quot;remote-shadowsocks-server-ip-addr&amp;quot;,&amp;quot;server_port&amp;quot;:443,&amp;quot;local_address&amp;quot;:&amp;quot;127.0.0.1&amp;quot;,&amp;quot;local_port&amp;quot;:1080,&amp;quot;password&amp;quot;:&amp;quot;your-passwd&amp;quot;,&amp;quot;timeout&amp;quot;:300,&amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;,&amp;quot;fast_open&amp;quot;:false,&amp;quot;workers&amp;quot;:1}Start a local socks proxy
sudo sslocal -c config/shadowsocks.json -d startIn case there is an openssl error, modify shadowsocks source file.
sudo vi /usr/local/lib/python3.6/dist-packages/shadowsocks/crypto/openssl.py :%s/cleanup/reset/gcConvert shadowsocks socks proxy to http proxy</description>
    </item>
    
    <item>
      <title>微服务安全沉思录之三</title>
      <link>https://leezhuang96.github.io/2018/05/23/external_system_auth/</link>
      <pubDate>Wed, 23 May 2018 18:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/05/23/external_system_auth/</guid>
      <description>外部系统访问控制 除用户访问和微服务之间的相互访问外，外部的第三方系统也可能需要访问系统内部的微服务。例如在上一篇博客的网上商店例子中，外部的</description>
    </item>
    
    <item>
      <title>微服务安全沉思录之二</title>
      <link>https://leezhuang96.github.io/2018/05/23/service_2_service_auth/</link>
      <pubDate>Wed, 23 May 2018 15:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/05/23/service_2_service_auth/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;服务间认证与鉴权&lt;/h2&gt;
&lt;p&gt;除来自用户的访问请求以外，微服务应用中的各个微服务相互之间还有大量的访问，包括下述场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户间接触发的微服务之间的相互访问&lt;!-- raw HTML omitted --&gt;
例如在一个网上商店应用中，用户访问购物车微服务进行结算时，购物车微服务可能需要访问用户评级微服务获取用户的会员级别，以得到用户可以享受购物折扣。&lt;/li&gt;
&lt;li&gt;非用户触发的微服务之间的相互访问&lt;!-- raw HTML omitted --&gt;
例如数据同步或者后台定时任务导致的微服务之间的相互访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据应用系统的数据敏感程度的不同，对于系统内微服务的相互访问可能有不同的安全要求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微服务安全沉思录之一</title>
      <link>https://leezhuang96.github.io/2018/05/22/user_authentication_authorization/</link>
      <pubDate>Wed, 23 May 2018 10:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/05/22/user_authentication_authorization/</guid>
      <description>这段时间对之前微服务安全相关的一些想法进行了进一步总结和归纳，理清了在之前文章里面没有想得太清楚的地方，例如服务间的认证与鉴权以及用户身份在</description>
    </item>
    
    <item>
      <title>Istio Sidecar自动注入原理</title>
      <link>https://leezhuang96.github.io/2018/05/23/istio-auto-injection-with-webhook/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/05/23/istio-auto-injection-with-webhook/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;前言&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Kubernets 1.9版本引入了Admission Webhook(web 回调)扩展机制，通过Webhook,开发者可以非常灵活地对Kubernets API Server的功能进行扩展，在API Server创建资源时对资源进行验证或者修改。&lt;/p&gt;
&lt;p&gt;使用webhook的优势是不需要对API Server的源码进行修改和重新编译就可以扩展其功能。插入的逻辑实现为一个独立的web进程，通过参数方式传入到kubernets中，由kubernets在进行自身逻辑处理时对扩展逻辑进行回调。&lt;/p&gt;
&lt;p&gt;Istio 0.7版本就利用了Kubernets webhook实现了sidecar的自动注入。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Helm介绍</title>
      <link>https://leezhuang96.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</link>
      <pubDate>Mon, 16 Apr 2018 15:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</guid>
      <description>前言 Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Hel</description>
    </item>
    
    <item>
      <title>Service Mesh 和 API Gateway的关系探讨（译文）</title>
      <link>https://leezhuang96.github.io/2018/04/11/service-mesh-vs-api-gateway/</link>
      <pubDate>Wed, 11 Apr 2018 09:32:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/04/11/service-mesh-vs-api-gateway/</guid>
      <description>Service Mesh vs API Gateway 在前一篇关于Service Mesh的文章中,我提到了几个关于Service Mesh和API Gateway之间关系的问题，在本篇文章</description>
    </item>
    
    <item>
      <title>谈谈微服务架构中的基础设施：Service Mesh与Istio</title>
      <link>https://leezhuang96.github.io/2018/03/29/what-is-service-mesh-and-istio/</link>
      <pubDate>Thu, 29 Mar 2018 12:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/03/29/what-is-service-mesh-and-istio/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;微服务架构的演进&lt;/h2&gt;
&lt;p&gt;作为一种架构模式，微服务将复杂系统切分为数十乃至上百个小服务，每个服务负责实现一个独立的业务逻辑。这些小服务易于被小型的软件工程师团队所理解和修改，并带来了语言和框架选择灵活性，缩短应用开发上线时间，可根据不同的工作负载和资源要求对服务进行独立缩扩容等优势。&lt;/p&gt;
&lt;p&gt;另一方面，当应用被拆分为多个微服务进程后，进程内的方法调用变成了了进程间的远程调用。引入了对大量服务的连接、管理和监控的复杂性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何配置docker使用HTTP代理</title>
      <link>https://leezhuang96.github.io/2018/03/13/use-docker-behind-http-proxy/</link>
      <pubDate>Tue, 13 Mar 2018 18:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/03/13/use-docker-behind-http-proxy/</guid>
      <description>&lt;h2 id=&#34;ubuntu&#34;&gt;Ubuntu&lt;/h2&gt;
&lt;h3 id=&#34;dockerhttp-proxy&#34;&gt;设置docker使用http proxy&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;sudo /etc/default/docker

export http_proxy=&amp;quot;http://127.0.0.1:3128/&amp;quot;
export https_proxy=&amp;quot;http://127.0.0.1:3128/&amp;quot;
export HTTP_PROXY=&amp;quot;http://127.0.0.1:3128/&amp;quot;
export HTTPS_PROXY=&amp;quot;http://127.0.0.1:3128/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Vim Tips</title>
      <link>https://leezhuang96.github.io/2018/02/09/vim-tips/</link>
      <pubDate>Fri, 09 Feb 2018 11:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/02/09/vim-tips/</guid>
      <description>&lt;h2 id=&#34;vim-graphical-cheat-sheet&#34;&gt;vim graphical cheat sheet&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://leezhuang96.github.io/https://img.zhaohuabing.com/in-post/2018-02-09-vim-tips/vi-vim-cheat-sheet.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何使用非root用户执行docker命令</title>
      <link>https://leezhuang96.github.io/2018/02/09/docker-without-sudo/</link>
      <pubDate>Fri, 09 Feb 2018 10:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/02/09/docker-without-sudo/</guid>
      <description>Add the docker group if it doesn&#39;t already exist: sudo groupadd docker Add the connected user &amp;ldquo;$USER&amp;rdquo; to the docker group. Change the user name to match your preferred user if you do not want to use your current user: sudo gpasswd -a $USER docker Either do a newgrp docker or log out/in to activate the changes to groups.</description>
    </item>
    
    <item>
      <title>Nginx开源Service Mesh组件Nginmesh安装指南</title>
      <link>https://leezhuang96.github.io/2018/01/02/nginmesh-install/</link>
      <pubDate>Tue, 02 Jan 2018 12:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2018/01/02/nginmesh-install/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Nginmesh是NGINX的Service Mesh开源项目，用于Istio服务网格平台中的数据面代理。它旨在提供七层负载均衡和服务路由功能，与Istio集成作为sidecar部署，并将以“标准，可靠和安全的方式”使得服务间通信更容易。Nginmesh在今年底已经连续发布了0.2和0.3版本，提供了服务发现，请求转发，路由规则，性能指标收集等功能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何从外部访问Kubernetes集群中的应用？</title>
      <link>https://leezhuang96.github.io/2017/11/28/access-application-from-outside/</link>
      <pubDate>Tue, 28 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2017/11/28/access-application-from-outside/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;我们知道，kubernetes的Cluster Network属于私有网络，只能在cluster Network内部才能访问部署的应用，那如何才能将Kubernetes集群中的应用暴露到外部网络，为外部用户提供服务呢？本文探讨了从外部网络访问kubernetes cluster中应用的几种实现方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>采用Istio实现灰度发布(金丝雀发布)</title>
      <link>https://leezhuang96.github.io/2017/11/08/istio-canary-release/</link>
      <pubDate>Wed, 08 Nov 2017 15:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2017/11/08/istio-canary-release/</guid>
      <description>灰度发布（又名金丝雀发布）介绍 当应用上线以后，运维面临的一大挑战是如何能够在不影响已上线业务的情况下进行升级。做过产品的同学都清楚，不管在发</description>
    </item>
    
    <item>
      <title>使用Istio实现应用流量转移</title>
      <link>https://leezhuang96.github.io/2017/11/07/istio-traffic-shifting/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2017/11/07/istio-traffic-shifting/</guid>
      <description>&lt;p&gt;关于Istio的更多内容请参考&lt;a href=&#34;http://istio.doczh.cn/&#34;&gt;istio中文文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;原文参见&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/traffic-shifting.html&#34;&gt;Traffic Shifting&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本任务将演示如何将应用流量逐渐从旧版本的服务迁移到新版本。通过Istio，可以使用一系列不同权重的规则（10%，20%，··· 100%）将流量平缓地从旧版本服务迁移到新版本服务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Istio及Bookinfo示例程序安装试用笔记</title>
      <link>https://leezhuang96.github.io/2017/11/04/istio-install_and_example/</link>
      <pubDate>Sat, 04 Nov 2017 12:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2017/11/04/istio-install_and_example/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;服务网格简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;服务网格&lt;/strong&gt;（Service Mesh）是为解决微服务的通信和治理而出现的一种&lt;strong&gt;架构模式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;服务网格将服务间通讯以及与此相关的管理控制功能从业务程序中下移到一个基础设施层，从而彻底隔离了业务逻辑和服务通讯两个关注点。采用服务网格后，应用开发者只需要关注并实现应用业务逻辑。服务之间的通信，包括服务发现，通讯的可靠性，通讯的安全性，服务路由等由服务网格层进行处理，并对应用程序透明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://leezhuang96.github.io/search/placeholder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/search/placeholder/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://leezhuang96.github.io/top/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/top/about/</guid>
      <description>Jorodn Li is passionate about open source, Java, C #, .NetCore and Web.
He also has strong interests in various tech stuff such as Artificial Intelligence, Cryptocurrencies, Smart Home.
Jorodn holds a BS in Network Engineering from SuZhou University in China.
He is happy with his current job, but also willing to take new challenges if the opportunity matches his career path.
While he is not working, he enjoys watching movies, swimming, hiking, travelling, writing blogs and learning languages.</description>
    </item>
    
    <item>
      <title>重装徒步反穿武功山</title>
      <link>https://leezhuang96.github.io/2019/09/13/wugongshan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://leezhuang96.github.io/2019/09/13/wugongshan/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;重装徒步反穿武功山&lt;/h2&gt;
&lt;p&gt;bilibili: &lt;a href=&#34;https://www.bilibili.com/video/av71750087&#34;&gt;https://www.bilibili.com/video/av71750087&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;两天一夜
龙山村-发云界-好汉坡-绝望坡-夜宿汇锦山庄（帐篷）-金顶&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>